/*
            * Main SCSS file for including styles for component.
            * 
            * Imports:
            * - Styling variables (_var__component_name.scss)
            * - Base styles (_css__component_name.scss)
            * 
            */
/*
            * _var__component_name.scss
            * 
            * SCSS file containing variables for component styling.
            * 
            * Used to define default parameters (color, size, etc.)
            * that can be overridden in other parts of the project.
            * 
            * Example usage:
            * --sf-icon--fill: 0; // Fill for icon
            */
/*checkbox styles*/
.checkbox-wrapper {
  display: grid; }

.wrapper-standart {
  --sf-checkbox--grid-f: var(--sf-a2);
  --sf-checkbox--grid-s: var(--sf-a4);
  grid-template-columns: var(--sf-checkbox--grid-f) var(--sf-checkbox--grid-s); }

.wrapper-large {
  --sf-checkbox--grid-f: var(--sf-a4);
  --sf-checkbox--grid-s: var(--sf-a4);
  grid-template-columns: var(--sf-checkbox--grid-f) var(--sf-checkbox--grid-s); }

/*checkbox toggle styles*/
.container-toggle {
  position: relative; }

.container-toggle input {
  position: absolute;
  opacity: 0;
  width: 0;
  height: 0; }

.slider-round {
  --sf-checkbox-sl-r--width: var(--sf-d2);
  --sf-checkbox-sl-r--height: var(--sf-c2);
  position: relative;
  display: block;
  cursor: pointer;
  background-color: #fff;
  transition: 0.4s;
  width: var(--sf-checkbox-sl-r--width);
  height: var(--sf-checkbox-sl-r--height);
  border-radius: 60px;
  border-width: 2px;
  border-color: #333; }

.slider-round:before {
  --sf-checkbox-sl-r--height: var(--sf-b5);
  --sf-checkbox-sl-r--width: var(--sf-b5);
  --sf-checkbox-sl-r--top: var(--sf-a3);
  content: "";
  position: absolute;
  height: var(--sf-checkbox-sl-r--height);
  width: var(--sf-checkbox-sl-r--width);
  background-color: #333;
  transition: 0.4s;
  top: var(--sf-checkbox-sl-r--top);
  left: var(--sf-checkbox-sl-r--top);
  border-radius: 60px;
  color: #333; }

input:checked + .slider-round {
  --sf-checkbox-sl-in--background-color: var(--sf-primary);
  --sf-checkbox-sl-in--border-color: var(--sf-primary);
  background-color: var(--sf-checkbox-sl-in--background-color);
  border-color: var(--sf-checkbox-sl-in--border-color); }

input:checked + .slider-round:before {
  --sf-checkbox-sl-r-translate: var(--sf-c2);
  transform: translateX(var(--sf-checkbox-sl-r-translate));
  background-color: white; }

/*horizontal styles for checkboxes*/
/* The container */
.container-horizontal {
  --sf-checkbox-con-hor--padding-left: var(--sf-c7);
  --sf-checkbox-con-hor--margin-bottom: var(--sf-b2)
    display: block;
  position: relative;
  padding-left: var(--sf-checkbox-con-hor--padding-left);
  margin-bottom: var(--sf-checkbox-con-hor--margin-bottom);
  cursor: pointer;
  -webkit-user-select: none;
  user-select: none; }

/* Hide the browser's default checkbox */
.container-horizontal input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0; }

/* Create a custom checkbox */
.checkmark {
  --sf-checkbox-checkmark--height: var(--sf-c3);
  --sf-checkbox-checkmark--width: var(--sf-c3);
  --sf-checkbox-checkmark--border-color: var(--sf-on-surface-variant);
  position: absolute;
  top: 0;
  left: 0;
  height: var(--sf-checkbox-checkmark--height);
  width: var(--sf-checkbox-checkmark--width);
  background-color: #fff;
  border: solid;
  border-width: 1px;
  border-color: var(--sf-checkbox-checkmark--border-color); }

/* When the checkbox is checked, add a blue background */
.container-horizontal input:checked ~ .checkmark {
  --sf-checkbox-con-hor-input--background-color: var(--sf-primary);
  background-color: var(--sf-checkbox-con-hor-input--background-color); }

/* Create the checkmark/indicator (hidden when not checked) */
.checkmark:after {
  content: "";
  position: absolute;
  display: block; }

/* Show the checkmark when checked */
.container-horizontal input:checked ~ .checkmark:after {
  display: block;
  background-color: white; }

/* Style the checkmark/indicator */
.container-horizontal .checkmark:after {
  --sf-checkbox-con-hor--left: var(--sf-a3);
  --sf-checkbox-con-hor--top: var(--sf-b1);
  --sf-checkbox-con-hor--width: var(--sf-b5);
  --sf-checkbox-con-hor--height: var(--sf-a2);
  display: block;
  left: var(--sf-checkbox-con-hor--left);
  top: var(--sf-checkbox-con-hor--top);
  width: var(--sf-checkbox-con-hor--width);
  height: var(--sf-checkbox-con-hor--height);
  background-color: #333; }

[class*='container'] .checkmark:hover, .slider-round:hover {
  --sf-checkmark-sl-round--webkit-box-shadow:
      var(--sf-a0) var(--sf-a0) var(--sf-a0) var(--sf-a3) #0073ED3D;
  --sf-checkmark-sl-round--moz-box-shadow:
      var(--sf-a0) var(--sf-a0) var(--sf-a0) var(--sf-a3) #0073ED3D;
  --sf-checkmark-sl-round--box-shadow:
      var(--sf-a0) var(--sf-a0) var(--sf-a0) var(--sf-a3) #0073ED3D;
  box-shadow: 0px 0px 0px 3px #0073ED3D; }

/*standart check*/
.container {
  --sf-checkmark-con--padding-left: var(--sf-d5);
  --sf-checkmark-con--margin-bottom: var(--sf-b2);
  --sf-checkmark-con--font-size: var(--sf-c2);
  display: block;
  position: relative;
  padding-left: var(--sf-checkmark-con--padding-left);
  margin-bottom: var(--sf-checkmark-con--margin-bottom);
  cursor: pointer;
  font-size: var(--sf-checkmark-con--font-size);
  -webkit-user-select: none;
  user-select: none; }

/* Hide the browser's default checkbox */
.container input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0; }

/* Create a custom checkbox */
.checkmark {
  --sf-checkmark-check--height: var(--sf-c2);
  position: absolute;
  top: 0;
  left: 0;
  height: var(--sf-c2);
  width: var(--sf-c2);
  background-color: #eee; }

/* When the checkbox is checked, add a blue background */
.container input:checked ~ .checkmark {
  background-color: var(--sf-primary); }

/* Create the checkmark/indicator (hidden when not checked) */
.checkmark:after {
  content: "";
  position: absolute;
  display: none; }

/* Show the checkmark when checked */
.container input:checked ~ .checkmark:after {
  display: block; }

/* Style the checkmark/indicator */
.container .checkmark:after {
  --sf-checkmark-con--left: var(--sf-a8);
  --sf-checkmark-con--top: var(--sf-a1);
  --sf-checkmark-con--width: var(--sf-a8);
  --sf-checkmark-con--height: var(--sf-b5);
  left: var(--sf-checkmark-con--left);
  top: var(--sf-checkmark-con--top);
  width: var(--sf-checkmark-con--width);
  height: var(--sf-checkmark-con--height);
  border: solid white;
  border-width: 0 var(--sf-a2) var(--sf-a2) 0;
  transform: rotate(45deg); }

/*radio styles*/
.container-radio {
  --sf-checkmark-con-rad--padding-left: var(--sf-a1);
  --sf-checkmark-con-rad--margin-bottom: var(--sf-b2);
  display: block;
  position: relative;
  padding-left: var(--sf-checkmark-con-rad--padding-left);
  margin-bottom: var(--sf-checkmark-con-rad--margin-bottom);
  cursor: pointer;
  -webkit-user-select: none;
  user-select: none; }

/* Hide the browser's default radio button */
.container-radio input {
  position: absolute;
  opacity: 0;
  cursor: pointer; }

/* Create a custom radio button */
.checkmark-radio {
  --sf-checkmark-check-rad--height: var(--sf-c2);
  position: absolute;
  top: 0;
  left: 0;
  height: var(--sf-checkmark-check-rad--height);
  width: var(--sf-checkmark-check-rad--height);
  background-color: #fff;
  border: solid;
  border-width: 1px;
  border-color: var(--sf-on-surface-variant);
  border-radius: 50%; }

/* When the radio button is checked, add a blue background */
.container-radio input:checked ~ .checkmark-radio {
  background-color: var(--sf-primary); }

/* Create the indicator (the dot/circle - hidden when not checked) */
.checkmark-radio:after {
  content: "";
  position: absolute;
  display: none; }

/* Show the indicator (dot/circle) when checked */
.container-radio input:checked ~ .checkmark-radio:after {
  display: block; }

/* Style the indicator (dot/circle) */
.container-radio .checkmark-radio:after {
  --sf-checkmark-check-rad-a--top: var(--sf-a4);
  --sf-checkmark-check-rad-a--left: var(--sf-a4);
  --sf-checkmark-check-rad-a--width: var(--sf-b5);
  top: var(--sf-checkmark-check-rad-a--top);
  left: var(--sf-checkmark-check-rad-a--left);
  width: var(--sf-checkmark-check-rad-a--width);
  height: var(--sf-checkmark-check-rad-a--width);
  border-radius: 50%;
  background: white; }

/*style for disabled input*/
[class*='container']:has(input:disabled) {
  opacity: 0.3; }

/*style for error*/
.error {
  border-color: var(--sf-error);
  background-color: #ffffff; }

/*style for primary color*/
.primary {
  border-color: var(--sf-primary);
  background-color: #ffffff; }

/*small class*/
.small.checkmark-radio, .small.checkmark,
.small .checkmark-radio, .small .checkmark {
  height: var(--sf-b6);
  width: var(--sf-b6); }

.container-horizontal .small.checkmark:after,
.small .container-horizontal .checkmark:after, .small.container-horizontal .checkmark:after {
  left: var(--sf-a2);
  top: var(--sf-a6);
  width: var(--sf-a9);
  height: var(--sf-a2); }

.container .small.checkmark:after,
.small .container .checkmark:after, .small.container .checkmark:after {
  left: var(--sf-a4);
  top: var(--sf-a2);
  width: var(--sf-a5);
  height: var(--sf-a8); }

.container-radio .small.checkmark-radio:after,
.small .container-radio .checkmark-radio:after, .small.container-radio .checkmark-radio:after {
  top: var(--sf-a4);
  left: var(--sf-a4);
  width: var(--sf-a8);
  height: var(--sf-a8); }

.container-radio .small.checkmark-radio:after,
.small .container-radio .checkmark-radio:after, .small.container-radio .checkmark-radio:after {
  top: var(--sf-a4);
  left: var(--sf-a4);
  width: var(--sf-a8);
  height: var(--sf-a8); }

.container-toggle .small.slider-round, .small .slider-round {
  width: var(--sf-c8);
  height: var(--sf-c0); }

.small.slider-round:before, .small .slider-round:before {
  height: var(--sf-b3);
  width: var(--sf-b3);
  top: var(--sf-a2);
  left: var(--sf-a2); }

.small span > :not(i) {
  font-size: var(--sf-text--size-1\/2);
  line-height: var(--sf-text--height-1\/2); }

.small.wrapper-large {
  grid-template-columns: 3rem 4rem; }

.small input.checkbox:checked ~ span:before {
  transform: translateX(14px); }

label {
  margin-bottom: 20px; }

