@charset "UTF-8";
/*
            * Main SCSS file for including styles for component.
            * 
            * Imports:
            * - Styling variables (_var__component_name.scss)
            * - Base styles (_css__component_name.scss)
            * 
            */
/*
            * _var__component_name.scss
            * 
            * SCSS file containing variables for component styling.
            * 
            * Used to define default parameters (color, size, etc.)
            * that can be overridden in other parts of the project.
            * 
            * Example usage:
            * --sf-icon--fill: 0; // Fill for icon
            */
/* container for loader */
.loading-container {
  display: flex;
  justify-content: center;
  flex-direction: column;
  align-items: center;
  padding-top: var(--sf-b5); }

/* styles of loading indicator */
.loading-indicator {
  --sf-loader--diameter: var(--sf-d2);
  width: var(--sf-loader--diameter);
  height: var(--sf-loader--diameter);
  border: var(--sf-a5) solid var(--sf-surface-4);
  /* Светлый цвет границы */
  border-top: var(--sf-a5) solid var(--sf-primary);
  border-radius: 50%;
  /* Делаем круг */
  animation: spin 1s linear infinite;
  /* Анимация вращения */ }

.loading-indicator.half {
  border-right: var(--sf-a5) solid var(--sf-primary-50); }

/* spinning animation */
@keyframes spin {
  0% {
    transform: rotate(0deg); }
  100% {
    transform: rotate(360deg); } }

.loading-container .text-margin {
  padding-top: var(--sf-b6);
  font-family: var(--sf-text--family);
  font-weight: 400;
  font-size: var(--sf-text--size);
  color: var(--sf-on-surface); }

/*loader with circles*/
.loader {
  --sf-loader-points--diameter: var(--sf-d0);
  position: relative;
  width: var(--sf-loader-points--diameter);
  height: var(--sf-loader-points--diameter); }

.loader span {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform: rotate(calc(22.5deg * var(--i))); }

.loader span::before {
  --sf-loader-points-span--diameter: var(--sf-a6);
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: var(--sf-loader-points-span--diameter);
  height: var(--sf-loader-points-span--diameter);
  border-radius: 50%;
  animation: animate 2s linear infinite;
  animation-delay: calc(0.12s * var(--i));
  background: var(--sf-primary); }

/*small styles*/
.loader.small, .loading-indicator.small {
  --sf-loader-points--diameter: var(--sf-c5);
  --sf-loader--diameter: var(--sf-c5); }

.loader.small span::before {
  --sf-loader-points-span--diameter: var(--sf-a5); }

/*big styles*/
.loader.big, .loading-indicator.big {
  --sf-loader-points--diameter: var(--sf-d4);
  --sf-loader--diameter: var(--sf-d4); }

.loader.big span::before {
  --sf-loader-points-span--diameter: var(--sf-a8); }

/*great styles*/
.loader.great, .loading-indicator.great {
  --sf-loader-points--diameter: var(--sf-d6);
  --sf-loader--diameter: var(--sf-d6); }

.loader.great span::before {
  --sf-loader-points-span--diameter: var(--sf-b0); }

@keyframes animate {
  0% {
    opacity: 1;
    transition: opacity 2s ease-; }
  100% {
    opacity: 0.1;
    transition: opacity 2s ease-; } }

